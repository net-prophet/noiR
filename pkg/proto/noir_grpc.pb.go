// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NoirClient is the client API for Noir service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoirClient interface {
	Subscribe(ctx context.Context, in *AdminClient, opts ...grpc.CallOption) (Noir_SubscribeClient, error)
	Send(ctx context.Context, in *NoirRequest, opts ...grpc.CallOption) (*Empty, error)
}

type noirClient struct {
	cc grpc.ClientConnInterface
}

func NewNoirClient(cc grpc.ClientConnInterface) NoirClient {
	return &noirClient{cc}
}

func (c *noirClient) Subscribe(ctx context.Context, in *AdminClient, opts ...grpc.CallOption) (Noir_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Noir_ServiceDesc.Streams[0], "/noir.Noir/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &noirSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Noir_SubscribeClient interface {
	Recv() (*NoirReply, error)
	grpc.ClientStream
}

type noirSubscribeClient struct {
	grpc.ClientStream
}

func (x *noirSubscribeClient) Recv() (*NoirReply, error) {
	m := new(NoirReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noirClient) Send(ctx context.Context, in *NoirRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/noir.Noir/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoirServer is the server API for Noir service.
// All implementations must embed UnimplementedNoirServer
// for forward compatibility
type NoirServer interface {
	Subscribe(*AdminClient, Noir_SubscribeServer) error
	Send(context.Context, *NoirRequest) (*Empty, error)
	mustEmbedUnimplementedNoirServer()
}

// UnimplementedNoirServer must be embedded to have forward compatible implementations.
type UnimplementedNoirServer struct {
}

func (UnimplementedNoirServer) Subscribe(*AdminClient, Noir_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNoirServer) Send(context.Context, *NoirRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNoirServer) mustEmbedUnimplementedNoirServer() {}

// UnsafeNoirServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoirServer will
// result in compilation errors.
type UnsafeNoirServer interface {
	mustEmbedUnimplementedNoirServer()
}

func RegisterNoirServer(s grpc.ServiceRegistrar, srv NoirServer) {
	s.RegisterService(&Noir_ServiceDesc, srv)
}

func _Noir_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdminClient)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoirServer).Subscribe(m, &noirSubscribeServer{stream})
}

type Noir_SubscribeServer interface {
	Send(*NoirReply) error
	grpc.ServerStream
}

type noirSubscribeServer struct {
	grpc.ServerStream
}

func (x *noirSubscribeServer) Send(m *NoirReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Noir_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoirServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noir.Noir/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoirServer).Send(ctx, req.(*NoirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Noir_ServiceDesc is the grpc.ServiceDesc for Noir service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Noir_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noir.Noir",
	HandlerType: (*NoirServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Noir_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Noir_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/noir.proto",
}
