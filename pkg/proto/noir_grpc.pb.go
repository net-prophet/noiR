// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NoirSFUClient is the client API for NoirSFU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoirSFUClient interface {
	Command(ctx context.Context, opts ...grpc.CallOption) (NoirSFU_CommandClient, error)
}

type noirSFUClient struct {
	cc grpc.ClientConnInterface
}

func NewNoirSFUClient(cc grpc.ClientConnInterface) NoirSFUClient {
	return &noirSFUClient{cc}
}

func (c *noirSFUClient) Command(ctx context.Context, opts ...grpc.CallOption) (NoirSFU_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoirSFU_ServiceDesc.Streams[0], "/noir.NoirSFU/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &noirSFUCommandClient{stream}
	return x, nil
}

type NoirSFU_CommandClient interface {
	Send(*NoirRequest) error
	Recv() (*NoirReply, error)
	grpc.ClientStream
}

type noirSFUCommandClient struct {
	grpc.ClientStream
}

func (x *noirSFUCommandClient) Send(m *NoirRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noirSFUCommandClient) Recv() (*NoirReply, error) {
	m := new(NoirReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoirSFUServer is the server API for NoirSFU service.
// All implementations must embed UnimplementedNoirSFUServer
// for forward compatibility
type NoirSFUServer interface {
	Command(NoirSFU_CommandServer) error
	mustEmbedUnimplementedNoirSFUServer()
}

// UnimplementedNoirSFUServer must be embedded to have forward compatible implementations.
type UnimplementedNoirSFUServer struct {
}

func (UnimplementedNoirSFUServer) Command(NoirSFU_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedNoirSFUServer) mustEmbedUnimplementedNoirSFUServer() {}

// UnsafeNoirSFUServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoirSFUServer will
// result in compilation errors.
type UnsafeNoirSFUServer interface {
	mustEmbedUnimplementedNoirSFUServer()
}

func RegisterNoirSFUServer(s grpc.ServiceRegistrar, srv NoirSFUServer) {
	s.RegisterService(&NoirSFU_ServiceDesc, srv)
}

func _NoirSFU_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoirSFUServer).Command(&noirSFUCommandServer{stream})
}

type NoirSFU_CommandServer interface {
	Send(*NoirReply) error
	Recv() (*NoirRequest, error)
	grpc.ServerStream
}

type noirSFUCommandServer struct {
	grpc.ServerStream
}

func (x *noirSFUCommandServer) Send(m *NoirReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noirSFUCommandServer) Recv() (*NoirRequest, error) {
	m := new(NoirRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoirSFU_ServiceDesc is the grpc.ServiceDesc for NoirSFU service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoirSFU_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noir.NoirSFU",
	HandlerType: (*NoirSFUServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _NoirSFU_Command_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/noir.proto",
}
