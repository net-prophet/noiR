syntax = "proto3";

option go_package = "github.com/net-prophet/noir/pkg/proto";

import "google/protobuf/timestamp.proto";

package noir;

/* ****************************************************
    NOIR COMMANDS API
 **************************************************** */
service NoirSFU {
    rpc Admin(stream NoirRequest) returns (stream NoirReply) {}
}

message NoirRequest {
    string id = 1;
    string at = 2;
    string action = 3;
    oneof command {
      SignalRequest signal = 4;
      RoomAdminRequest roomAdmin = 5;
    }
}

message NoirReply {
    string id = 1;
    string at = 2;
    oneof command {
        SignalReply signal = 3;
        RoomAdminReply roomAdmin = 4;
        string error = 5;
    }
}

/* ****************************************************
    Room Admin Commands
 **************************************************** */
message RoomAdminRequest {
    string roomID = 1;
    oneof payload {
        OpenRoomRequest openRoom = 2;
        PlayFileRequest play_file = 3;
    }
}

message RoomAdminReply {
    string roomID = 1;
    oneof payload {
        string error = 2;
    }
}

message OpenRoomRequest {
  RoomOptions options = 1;
}

message PlayFileRequest {
    string pid = 1; // peer id will be random if not specified
    string filename = 2;
    bool repeat = 3;
}

message PlayFileReply {
    string pid = 1; // peer id will be random if not specified
    string filename = 2;
    bool repeat = 3;
    bool status = 4;
}

/* ****************************************************
    SIGNAL COMMANDS - ION-SFU COMPATIBLE
    1 SIGNAL = 1 CLIENT CONNECTION
 **************************************************** */
message SignalRequest {
    string id = 1; // SignalRequest.id should be called pid but we are ion-sfu compatible
    oneof payload {
        JoinRequest join = 2;
        bytes description = 3;
        Trickle trickle = 4;
        bool kill = 5;
    }
    string requestId = 6; // optional, for requests with replies
}

message SignalReply {
    string id = 1;
    oneof payload {
        JoinReply join = 2;
        bytes description = 3;
        Trickle trickle = 4;
        string iceConnectionState = 5;
        string error = 6;
        bool kill = 7;
    }
    string requestId = 8; // optional, for requests with replies
}

message JoinRequest {
    string sid = 1;
    bytes description = 2;
}

message JoinReply {
    bytes description = 1;
}

message Trickle {
    enum Target {
        PUBLISHER = 0;
        SUBSCRIBER = 1;
    }
    Target target = 1;
    string init = 2;
}


/*
NOIR OBJECTS - REDIS KEYS:

Workers:
HSET /noir/obj/worker.health [123] => WorkerHealth
 + Hash is used for worker health so we can HGETALL

SETEX /noir/obj/room.options/{my_room} => RoomOptions
SETEX /noir/obj/room.health/{my_room} => RoomOptions
 + SETEX is best for rooms so the room is reserved until the key expires
 + health and options keys are separate so that health can quickly be replaced

Peers:
HSET /noir/obj/room.peers/ => PeerData

 */


message NoirObject {
    oneof data {
        WorkerData worker = 1;
        RoomData room = 2;
        UserData user = 3;
    }
}

message WorkerData {
    string id = 1;
    google.protobuf.Timestamp lastUpdate = 2;
}

message RoomData {
    string id = 1;
    google.protobuf.Timestamp created = 2;
    google.protobuf.Timestamp lastUpdate = 3;
    string workerID = 4;
    RoomOptions options = 5;
}
message RoomOptions {
    string title = 1;
    int32 maxAgeSeconds = 2;
    int32 keyExpiryFactor = 3;
    string joinPassword = 4;
    string publishPassword = 5;
    int32 maxPublishers = 6;
    int32 maxPeers = 7;
    int32 debug = 8;
}

message UserData {
    string id = 1;
    google.protobuf.Timestamp lastUpdate = 2;
    string roomID = 3;
    UserOptions options = 4;
}
message UserOptions {
    string title = 1;
    int32 debug = 2;
}
