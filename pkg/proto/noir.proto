syntax = "proto3";

option go_package = "github.com/net-prophet/noir/pkg/proto";

package noir;

/* ****************************************************
    NOIR COMMANDS API
 **************************************************** */
service NoirSFU {
    rpc Admin(stream NoirRequest) returns (stream NoirReply) {}
}

message NoirRequest {
    string id = 1;
    string at = 2;
    string action = 3;
    oneof command {
      SignalRequest signal = 4;
      SessionRequest session = 5;
    }
}

message NoirReply {
    string id = 1;
    string at = 2;
    oneof command {
        SignalReply signal = 3;
        SessionReply session = 4;
        string error = 5;
    }
}

/* ****************************************************
    SESSION COMMANDS - SESSION MANAGEMENT
 **************************************************** */
message SessionRequest {
    string sid = 1;
    oneof payload {
        ExpireSessionRequest stop = 2;
        PlayFileRequest play_file = 3;
    }
}

message SessionReply {
    string sid = 1;
    oneof payload {
        ExpireSessionReply stop = 2;
        PlayFileReply play_file = 3;
        string error = 6;
    }
}

message ExpireSessionRequest {
    string when = 1; // when will be now if not specified
}

message ExpireSessionReply {
    string when = 1;
    bool status = 2;
}

message PlayFileRequest {
    string pid = 1; // peer id will be random if not specified
    string filename = 2;
    bool repeat = 3;
}

message PlayFileReply {
    string pid = 1; // peer id will be random if not specified
    string filename = 2;
    bool repeat = 3;
    bool status = 4;
}

/* ****************************************************
    SIGNAL COMMANDS - ION-SFU COMPATIBLE
    1 SIGNAL = 1 CLIENT CONNECTION
 **************************************************** */
message SignalRequest {
    string id = 1; // SignalRequest.id should be called pid but we are ion-sfu compatible
    oneof payload {
        JoinRequest join = 2;
        bytes description = 3;
        Trickle trickle = 4;
    }
    string requestId = 5; // optional, for requests with replies
}

message SignalReply {
    string id = 1;
    oneof payload {
        JoinReply join = 2;
        bytes description = 3;
        Trickle trickle = 4;
        string iceConnectionState = 5;
        string error = 6;
    }
    string requestId = 7; // optional, for requests with replies
}

message JoinRequest {
    string sid = 1;
    bytes description = 2;
}

message JoinReply {
    bytes description = 1;
}

message Trickle {
    enum Target {
        PUBLISHER = 0;
        SUBSCRIBER = 1;
    }
    Target target = 1;
    string init = 2;
}
