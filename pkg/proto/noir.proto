syntax = "proto3";

option go_package = "github.com/net-prophet/noir/pkg/proto";

import "google/protobuf/timestamp.proto";

package noir;

/* GRPC ADMIN API */
message AdminClient {
    string clientID = 1;
}
message Empty {
}

service Noir {
    rpc Subscribe(AdminClient) returns (stream NoirReply);
    rpc Send(NoirRequest) returns (Empty);
    rpc Admin(stream NoirRequest) returns (stream NoirReply);
    rpc Signal(stream SignalRequest) returns (stream SignalReply) {}
}

/* ION COMPATABILITY SERVICE */
service SFU {
    rpc Signal(stream SignalRequest) returns (stream SignalReply) {}
}

/* ****************************************************
    NOIR COMMANDS API
 **************************************************** */

message NoirRequest {
    string id = 1;
    string at = 2;
    string action = 3;
    oneof command {
      SignalRequest signal = 4;
      AdminRequest admin = 5;
    }
    string adminID = 6;
}

message NoirReply {
    string id = 1;
    string at = 2;
    oneof command {
        SignalReply signal = 3;
        AdminReply admin = 4;
        string error = 5;
    }
}

/* ****************************************************
    Admin Commands
 **************************************************** */
message AdminRequest {
    oneof payload {
        RoomAdminRequest roomAdmin = 1;
        RoomCountRequest roomCount = 2;
        RoomListRequest roomList = 3;
    }
}
message AdminReply {
    oneof payload {
        string error = 1;
        RoomAdminReply roomAdmin = 2;
        RoomCountReply roomCount = 3;
        RoomListReply roomList = 4;
    }
}

message RoomCountRequest {
}

message RoomCountReply {
    int64 result = 1;
}

message RoomListRequest {
}

message RoomListEntry {
    string id = 1;
    int64 score = 2;
}

message RoomListReply {
    int64 count = 1;
    repeated RoomListEntry result = 2;
}

message RoomAdminRequest {
    string roomID = 1;
    oneof method {
        CreateRoomRequest createRoom = 2;
        PlayFileRequest playFile = 3;
    }
}

message RoomAdminReply {
    string roomID = 1;
    oneof payload {
        string error = 2;
        CreateRoomReply createRoom = 3;
        PlayFileReply playFile = 4;
    }
}

message CreateRoomRequest {
  RoomOptions options = 1;
}

message CreateRoomReply {
    RoomOptions options = 2;
}

message PlayFileRequest {
    string filename = 1;
    string pid = 2; // peer id will be random if not specified
    bool repeat = 3;
}

message PlayFileReply {
    string filename = 1;
    string pid = 2; // peer id will be random if not specified
    bool repeat = 3;
    bool status = 4;
}

/* ****************************************************
    SIGNAL COMMANDS - ION-SFU COMPATIBLE
    1 SIGNAL = 1 CLIENT CONNECTION
 **************************************************** */
message SignalRequest {
    string id = 1; // SignalRequest.id should be called pid but we are ion-sfu compatible
    oneof payload {
        JoinRequest join = 2;
        bytes description = 3;
        Trickle trickle = 4;
        bool kill = 5;
    }
    string requestId = 6; // optional, for requests with replies
}

message SignalReply {
    string id = 1;
    oneof payload {
        JoinReply join = 2;
        bytes description = 3;
        Trickle trickle = 4;
        string iceConnectionState = 5;
        string error = 6;
        bool kill = 7;
    }
    string requestId = 8; // optional, for requests with replies
}

message JoinRequest {
    string sid = 1;
    bytes description = 2;
}

message JoinReply {
    bytes description = 1;
}

message Trickle {
    enum Target {
        PUBLISHER = 0;
        SUBSCRIBER = 1;
    }
    Target target = 1;
    string init = 2;
}


/*
NOIR OBJECTS - for storing into redis
Each object is split into Data (the dynamic metadata) and Options (the user-updated options)
Eventually, we will store Health for these Objects, in a different key (so overwriting health doesnt change options)
 */


message NoirObject {
    oneof data {
        NodeData node = 1;
        RoomData room = 2;
        UserData user = 3;
    }
}

message NodeData {
    string id = 1;
    google.protobuf.Timestamp lastUpdate = 2;
}

message RoomData {
    string id = 1;
    google.protobuf.Timestamp created = 2;
    google.protobuf.Timestamp lastUpdate = 3;
    string nodeID = 4;
    RoomOptions options = 5;
    string publisher = 6;
}
message RoomOptions {
    int32 debug = 1;
    string title = 2;
    int32 maxAgeSeconds = 3;
    int32 keyExpiryFactor = 4;
    string joinPassword = 5;
    string publishPassword = 6;
    int32 maxPeers = 7;
    bool isChannel = 8;
}

message UserData {
    string id = 1;
    google.protobuf.Timestamp created = 2;
    google.protobuf.Timestamp lastUpdate = 4;
    string roomID = 5;
    UserOptions options = 6;
    bool publishing = 7;
}

message UserOptions {
    int32 debug = 1;
    string title = 2;
    int32 maxAgeSeconds = 3;
    int32 keyExpiryFactor = 4;
}
